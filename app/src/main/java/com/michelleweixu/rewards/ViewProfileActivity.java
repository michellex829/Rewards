package com.michelleweixu.rewards;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.util.Base64;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.ImageView;import android.widget.Toast;import com.michelleweixu.rewards.apis.DeleteProfileAPIRunnable;import com.michelleweixu.rewards.apis.GetAllProfilesAPIRunnable;import com.michelleweixu.rewards.userdata.UserProfile;import com.michelleweixu.rewards.userdata.UserReward;import java.util.Collections;import java.util.List;public class ViewProfileActivity extends AppCompatActivity{    public List<UserReward> rewardList;    UserProfile user;    private RecyclerView recyclerView;    RewardHistoryAdapter mAdapter;    int remainingPointsToAward;    private TextView name;    private TextView username;    private TextView pointsAwarded;    private TextView pointsToAward;    private TextView rewardHistoryTitle;    private TextView rewardHistory;    private TextView location;    private ImageView imageInView;    private TextView department;    private TextView position;    private TextView story;    private String apiKey, imageString64;    private ProgressBar progressBar;    private static int EDIT_PROFILE_CODE = 789;    private static int LEADERBOARD_CODE = 234;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_view_profile);        getSupportActionBar().setDisplayShowHomeEnabled(true);        getSupportActionBar().setLogo(R.mipmap.icon);        getSupportActionBar().setDisplayUseLogoEnabled(true);        getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor("#FF781F")));        getSupportActionBar().setTitle("Your Profile");        name = findViewById(R.id.fullnameInView);        username = findViewById(R.id.usernameInView);        pointsAwarded = findViewById(R.id.pointsAwardedInView);        pointsToAward = findViewById(R.id.pointsToAwardInView);        imageInView = findViewById(R.id.imageInView);        department = findViewById(R.id.departmentInView);        position = findViewById(R.id.positionInView);        story = findViewById(R.id.storyinview);        location = findViewById(R.id.locationInView);        rewardHistoryTitle = findViewById(R.id.rhistory);        progressBar = findViewById(R.id.progressBar4);        Intent intent = getIntent();        if (intent.hasExtra("user")) {            user = (UserProfile) intent.getSerializableExtra("user");            setUserData();            processRewardHistory();        }        if (intent.hasExtra("apiKey"))            apiKey = (String) intent.getSerializableExtra("apiKey");        if (rewardList == null)            rewardHistoryTitle.setText("Reward History(0)");        else {            int historySize = rewardList.size();            rewardHistoryTitle.setText("Reward History(" + historySize + "):");        }        mAdapter = new RewardHistoryAdapter(rewardList, this);        mAdapter.notifyDataSetChanged();        recyclerView = findViewById(R.id.recyclerViewHistoryInView);        recyclerView.setAdapter(mAdapter);        recyclerView.setLayoutManager(new LinearLayoutManager(this));        if (! intent.hasExtra("user")) {            pointsAwarded.setText(String.valueOf(user.pointsAwarded));            pointsToAward.setText(String.valueOf(user.remainingPointsToAward));        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) { // standard for options menu        getMenuInflater().inflate(R.menu.view_profile_menu, menu);        return true;    }    public void setUserData() {        name.setText(user.firstName + " " + user.lastName);        username.setText(user.username);        pointsAwarded.setText(String.valueOf(user.pointsAwarded));        department.setText(user.department);        position.setText(user.position);        location.setText(user.location);        story.setText(user.story);        imageString64 = user.imageString64;        pointsAwarded.setText(String.valueOf(user.pointsAwarded));        pointsToAward.setText(String.valueOf(user.remainingPointsToAward));        textToImage();    }    public void processRewardHistory() {        rewardList = user.rewardsList;        if (rewardList != null && rewardList.size() != 0)            Collections.sort(rewardList);    }    public boolean onOptionsItemSelected(MenuItem item) {        if (item.getItemId() ==  R.id.add_in_view_menu) {            openLeaderboardActivity();            return true;        }        else if (item.getItemId() ==  R.id.edit_in_view_menu) {            openEditProfileActivity();            return true;        }        else if (item.getItemId() ==  R.id.delete_in_view_menu) {            confirmDeleteDialog();            return true;        }        return super.onOptionsItemSelected(item);    }    public void confirmDeleteDialog() {        // Simple Ok & Cancel dialog - no view used.        AlertDialog.Builder builder = new AlertDialog.Builder(this);        builder.setIcon(R.mipmap.logo);        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int id) {                progressBar.setVisibility(View.VISIBLE);                startDeleteProfileAPIRunnable();                moveTaskToBack(true);            }        });        builder.setNegativeButton("CANCEL", new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int id) {            }        });        builder.setMessage("Are you sure you want to delete this profile?\n " +                "(The Rewards APP will be closed upon deletion).");        builder.setTitle("Delete Profile?");        AlertDialog dialog = builder.create();        dialog.show();    }    public void startDeleteProfileAPIRunnable() {        DeleteProfileAPIRunnable r = new DeleteProfileAPIRunnable(this, user.username, apiKey);        new Thread(r).start();        progressBar.setVisibility(View.INVISIBLE);    }    public void openEditProfileActivity() {        Intent intent = new Intent(this, EditProfileActivity.class);        intent.putExtra("apiKey", apiKey);        intent.putExtra("user", user);        startActivityForResult(intent, EDIT_PROFILE_CODE);    }    public void openLeaderboardActivity() {        progressBar.setVisibility(View.INVISIBLE);        Intent intent = new Intent(this, LeaderboardActivity.class);        intent.putExtra("apiKey", apiKey);        intent.putExtra("loggedInUser", user);        startActivityForResult(intent, LEADERBOARD_CODE);    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == LEADERBOARD_CODE) {            if (resultCode == RESULT_OK) {                Boolean text = data.getBooleanExtra("REWARD_ADDED", false);                if (data.hasExtra("POINTS"))                    user.remainingPointsToAward = data.getIntExtra("POINTS", 0);                    pointsToAward.setText(String.valueOf(user.remainingPointsToAward));            }        }    }    public void textToImage() {        if (imageString64 == null) return;        byte[] imageBytes = Base64.decode(imageString64, Base64.DEFAULT);        Bitmap bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);        imageInView.setImageBitmap(bitmap);    }    public void deleteSuccessAndQuit() {        Toast.makeText(this, "Profile deleted successfully.\nExiting the app now...", Toast.LENGTH_SHORT).show();        moveTaskToBack(true);    }    @Override    public void onBackPressed() {        Toast.makeText(this, "Exiting the app now...", Toast.LENGTH_SHORT).show();        moveTaskToBack(true);    }}